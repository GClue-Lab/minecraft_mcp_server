+++ ./node_modules/mineflayer/lib/plugins/physics.js	2025-07-31 11:10:17.117755824 +0900
@@ -153,6 +153,10 @@
   function updatePosition (now) {
     // Only send updates for 20 ticks after death
     if (isEntityRemoved()) return
+    if (!bot.entity || !bot.entity.position) {
+      console.warn('[physics] updatePosition skipped due to missing bot.entity or position')
+      return
+    }
 
     // Increment the yaw in baby steps so that notchian clients (not the server) can keep up.
     const dYaw = deltaYaw(bot.entity.yaw, lastSentYaw)
@@ -294,15 +298,33 @@
 
   bot._client.on('explosion', explosion => {
     // TODO: emit an explosion event with more info
-    if (bot.physicsEnabled && bot.game.gameMode !== 'creative') {
+    if (!bot.physicsEnabled || bot.game.gameMode === 'creative') return
+    if (!bot.entity || !bot.entity.velocity) {
+      console.warn('[physics] Explosion event received but bot.entity or velocity is undefined.');
+      return
+    }
+
+    try {
       if (explosion.playerKnockback) { // 1.21.3+
-        bot.entity.velocity.add(explosion.playerMotionX, explosion.playerMotionY, explosion.playerMotionZ)
+        const knockVec = new Vec3(explosion.playerMotionX, explosion.playerMotionY, explosion.playerMotionZ)
+        bot.entity.velocity = bot.entity.velocity.add(knockVec)
       }
+
       if ('playerMotionX' in explosion) {
-        bot.entity.velocity.x += explosion.playerMotionX
-        bot.entity.velocity.y += explosion.playerMotionY
-        bot.entity.velocity.z += explosion.playerMotionZ
+        if (
+          typeof bot.entity.velocity.x === 'number' &&
+          typeof bot.entity.velocity.y === 'number' &&
+          typeof bot.entity.velocity.z === 'number'
+        ) {
+          bot.entity.velocity.x += explosion.playerMotionX
+          bot.entity.velocity.y += explosion.playerMotionY
+          bot.entity.velocity.z += explosion.playerMotionZ
+        } else {
+          console.warn('[physics] Explosion velocity patch skipped due to invalid velocity components.');
+        }
       }
+    } catch (err) {
+      console.error('[physics] Exception in explosion knockback handling:', err);
     }
   })
 
@@ -335,6 +357,11 @@
   }
 
   bot.lookAt = async (point, force) => {
+    if (!bot.entity || !bot.entity.position) {
+      console.warn('[physics] bot.lookAt called but bot.entity or position is undefined.');
+      return;
+    }
+
     const delta = point.minus(bot.entity.position.offset(0, bot.entity.eyeHeight, 0))
     const yaw = Math.atan2(-delta.x, -delta.z)
     const groundDistance = Math.sqrt(delta.x * delta.x + delta.z * delta.z)
